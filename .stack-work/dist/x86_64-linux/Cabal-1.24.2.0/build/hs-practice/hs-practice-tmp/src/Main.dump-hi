
==================== FINAL INTERFACE ====================
2018-01-27 04:28:53.831832 UTC

interface main@main:Main 8002
  interface hash: fe1b7237af5c8029110ac6146485eed8
  ABI hash: b6862e8349058d379fb0051819e92f52
  export-list hash: 797252411572922f8d21f341e33677f8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2e0cfadbd2784448a7f23ea0459ead4e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.histo
  Main.main
  Main.worker
  Main.Attr{Main.Attr attribute hole}
  Main.CVAlgebra
  Main.Term{Main.In out}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Arrow 70754b538e7d75521cd68162917b6946
import  -/  base-4.9.1.0:Control.Category 74288f70105bf6db5ff51d18c3e2c349
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
1b8c3d3fff4251b9243a652e3e00a994
  $tc'Attr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2754218474784245176##
                   244267399734219618##
                   Main.$trModule
                   Main.$tc'Attr1) -}
2e4f4b04aa65d27655d4e574cc5b9b55
  $tc'Attr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Attr"#) -}
246b7718d3ddbe9ca66ef3625191c547
  $tc'In :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6197754167092793416##
                   5590680820324104015##
                   Main.$trModule
                   Main.$tc'In1) -}
5708b20fc572978bf4d09c2ee36ef9d7
  $tc'In1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'In"#) -}
7338d5b94ff7d1ced382d35d31b83eeb
  $tcAttr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4084346847203182435##
                   4879270492790566052##
                   Main.$trModule
                   Main.$tcAttr1) -}
5dd76736e55e313dd9fdfd0eadb26d73
  $tcAttr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Attr"#) -}
331582cf7e6b78f720a09055ab2e7283
  $tcTerm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8835275288110807306##
                   17876674785434025608##
                   Main.$trModule
                   Main.$tcTerm1) -}
a29e06a7d8c266d76e25faeb4e9874f9
  $tcTerm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Term"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
1fc5d5beda189c715ca4d6c6497cb8e6
  type role Attr nominal nominal
  data Attr (f :: * -> *) a
    = Attr {attribute :: a, hole :: f (Main.Attr f a)}
    RecFlag: Recursive
9368911ffb7be11d24cccc4e5630cb1d
  type CVAlgebra (f :: * -> *) a = f (Main.Attr f a) -> a
e9029475cedcfba28c2369d59c1715ef
  type role Term nominal
  newtype Term (f :: * -> *) = In {out :: f (Main.Term f)}
    RecFlag: Recursive
bee552b7a4c76cf151b47a2795e2fa1e
  attribute :: Main.Attr f a -> a
  RecSel Left Main.Attr
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *) @ a (ds :: Main.Attr f a) ->
                 case ds of wild { Main.Attr ds1 ds2 -> ds1 }) -}
97df3b81a018c7f2f10d9aa6e52ab138
  histo ::
    GHC.Base.Functor f => Main.CVAlgebra f a -> Main.Term f -> a
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ a
                   ($dFunctor :: GHC.Base.Functor f)
                   (h :: Main.CVAlgebra f a) ->
                 let {
                   g :: f (Main.Term f) -> f (Main.Attr f a)
                   = GHC.Base.fmap
                       @ f
                       $dFunctor
                       @ (Main.Term f)
                       @ (Main.Attr f a)
                       (Main.worker @ (Main.Term f -> Main.Attr f a))
                 } in
                 \ (x :: Main.Term f) -> h (g x `cast` (Main.N:Term[0] <f>_N))) -}
2b4c8279dfb1016448175a81fc7cf2ee
  hole :: Main.Attr f a -> f (Main.Attr f a)
  RecSel Left Main.Attr
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *) @ a (ds :: Main.Attr f a) ->
                 case ds of wild { Main.Attr ds1 ds2 -> ds2 }) -}
549e997b77251cffa539541e3fca551d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
12f13e20d189575a2f38fa0188d46990
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   eta) -}
5ca9aae8b1fa510e4d7ba6c699a49ec7
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello world"#) -}
eaf959ce78010a9f5591044b85b85e4b
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5cda676c83caa7a5936fcfc2a9a7f71f
  out :: Main.Term f -> f (Main.Term f)
  RecSel Left Main.Term
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.out1
                  `cast`
                (forall (f :: <* -> *>_N).
                 <Main.Term f>_R ->_R Main.N:Term[0] <f>_N) -}
7e781628ac54245280e7451700b9210a
  out1 :: Main.Term f -> Main.Term f
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (f :: * -> *) (ds :: Main.Term f) -> ds) -}
9e16d18d9fb7651715b7845e3ba5b8a1
  worker :: _a
  {- Strictness: x -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

